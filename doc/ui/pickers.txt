=== Pickers

Pickers are widgets that are relative to another Element.


==== UI.Picker < UI.Widget

Base picker object. Should be considered abstract.

.Methods

  initPicker(relativeElement, options = {})::
    Creates the widget related to an Element.

  position()::
    Positions the widget around relativeElement, depending on the `position`
    option.

  realize()::
    Overwrites the default realize method by inserting the widget inside the
    parent Element of the relative Element instead as a child of the document's
    body.

  activate()::
    Called when the widget is activated. Dispatches the `activate` event then
    displays the widget.

  deactivate()::
    Called when the widget is deactivated. Dispatches the `deactivate` event
    then closes the widget.

.Options

  onClose::
    See UI.Widget for documentation. Defaults to `'hide'`.

  closeOnEscape::
    See UI.Widget for documentation. Defaults to `true`.

  closeOnOuterClick::
    See UI.Widget for documentation. Defaults to `true`.

  activate::
    An array of event types that may activate the widget that shall be added
    to the relative Element. Empty by default.

  deactivate::
    An array of event types that may deactivate the widget that shall be added
    to the relative Element. Empty by default.

  position::
    A string or an array of strings representing the position of the widget.
    Accepts any combinaison of: `'top'`, `'right'`, `'bottom'` and `'left'`.
    By default it puts the picker below the relative Element with the minimum
    width of that relative Element.

.Events

  activate::
    Dispatched when the widget is activated. Default behavior may be cancelled.

  deactivate::
    Dispatched when the widget is deactivated. Default behavior may be cancelled.


// === UI.ColorPicker < UI.Picker
//
// .Methods
//
//   - initColorPicker()
//   - setColor()
//   - setBaseColor()
//   - applyColor()
//   - getGradientColor()
//   - getHueColor()


// === UI.DatePicker < UI.Picker
//
// .Methods
//
//   - initDatePicker()


==== UI.ListPicker < UI.Picker

Displays a list of possible choices for an input.

.Methods

  initListPicker(relativeElement, options = {})::
    Initializes the picker. Possible options are

  cancel()::

  displayOrHide()::

  setItems(items)::
    Sets the list items. May be a HTML string, a DocumentFragment or a mixed
    Array of HTML strings, Elements and DocumentFragments.

  getItems()::
    Returns the list items as DOM Elements.

  getItem(index)::
    Returns the item of index as a DOM Element.

  hasItems()::
    Returns true unless the list items if empty.

  clearItems()::
    Removes all items from the list.

  markSelection(item)::
    Marks an item for selection.

  unmarkSelection()::
    Unmarks any item marked for selection.

  moveSelectionUp()::
    Marks the item before the currently marked item, thus unmarking the current
    item.

  moveSelectionDown()::
    Marks the item after the currently marked item, thus unmarking the current
    item.

  selectSelection()::
    Fires the `select` event with event.targetElement set to the currently
    marked item. Eventually hides the list picker.

.Options

  activate::
    An array of DOM event types on the relativeElement that may activate the
    picker. Defaults to `[ 'focus', 'click' ]`.

  autoMarkFirst::
    Automatically marks the first proposed item in the list for selection.
    Defaults to false.

.Events

    select::
        Dispatched when an item is selected. You may access the selected item,
        as a DOM Element, through the `targetElement` property of the event.

==== UI.Autocompleter < UI.ListPicker

Autocompletes text entered in a text field input.

.Methods

  autocomplete(e)::
    Called whenever an item is selected. Tries to read a `data-value` attribute
    and falls back to the item's text content.

  search()::
    Called whenever a key is typed. Takes care to query the remote URL, to
    update the contents, etc.

  setValue(value)::
    Replaces the text field's value. Eventually clears the list.

  xhrRequest()::
    The actual XMLHTTPRequest. Override if you need custom calls.

  jsonpRequest()::
    The actual JSONP request. Override if you need custom calls.

  url()::
    Correctly formats the URL with the query parameter and value.

.Options

  delay::
    Delay calls by some milliseconds in order to limit remote calls. Defaults
    to 200 (ms).
  param::
    The parameter name to use for the XMLHTTPRequest calls. Defaults to `param`.

  url::
    The URL to use for the XMLHTTPRequest or JSONP calls.

  jsonp::
    Set to true to use JSONP instead of XMLHTTPRequest for remote calls.

  callback::
    The name of the callback parameter for JSONP requests. Defaults to
    `callback`.

