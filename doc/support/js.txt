== JavaScript support

=== Color

.TODO
Write documentation for Color.

=== Eventable

Adds DOM Events-like support to any object.

.Example

  var MyKlass = function() {}
  Eventable(MyKlass, ['activate', 'deactivate'])

.Methods added to the object's prototype

  - addEventListener(type, callback)
  - removeEventListener(type, callback)
  - createEvent(type)
  - dispatchEvent(event_or_type)

`ontype` methods are also supported. For instance with the previous example:

  - onactivate(event)
  - ondeactivate(event)

=== Function

.Methods

  bind(object)::
    facility to bind an object to a function whatever the calling context.
    It's especially useful for binding `this`.

=== Inflector

String inflections follow the rules of `ActiveSupport::Inflector` of Ruby on
Rails.

.Object Methods

  plural(regexp, replacement)::
    declares a singular -> plural rule.

  singular(regexp, replacement)::
    declares a plural -> singular rule.

  irregular(singular, plural)::
    declares an irregular word.

  uncountable(words)::
    declares uncountable words -- takes an array of strings.

=== RegExp

.Methods

  RegExp.escape()::
    escapes a string to be included in a RegExp.

=== String

These methods follow the rules of the Ruby `String` and Ruby on Rails
`ActiveSupport::String` classes.

.Prototype methods

  - capitalize
  - camelize
  - classsify
  - constantize
  - dasherize
  - humanize
  - parameterize
  - pluralize
  - singularize
  - tableize
  - titleize
  - transliterate
  - underscore

=== Optionable

Simplifies options handling to any object. Options are simple `{key: value}` objects.

.Example:

  var MyKlass = function() {}
  Optionable(MyKlass)

.Methods added to the object's prototype

  setOptions(options)::
    overwrites previously set options.

  setDefaultOptions(options)::
    adds options only if they weren't already defined.

