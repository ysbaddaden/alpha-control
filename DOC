= AlphaControl

AlphaControl is a collection of libraries for client-side JavaScript. It's
definitive goal is to provide a framework for webapps. Thought it's goal is
similar to frameworks like Cappuccino, AlphaControl aims to leave complete
control over the DOM to the developers.

AlphaControl is meant for Web developers that want to move the logic to the
client, not for mobile apps developers that want to move from native to the
browser. You must know or learn about JavaScript prototypes and how it
actually works. You must know or learn HTML, CSS and the DOM API.

== JavaScript support

=== Color

=== Eventable

Adds DOM Events-like support to any object.

.Example

  var Klass = function() {}
  Eventable(Klass, ['activate', 'deactivate'])

.Methods added to the object's prototype

- addEventListener(type, callback)
- removeEventListener(type, callback)
- createEvent(type)
- dispatchEvent(event_or_type)

The previous example would also add on + type methods:

- onactivate(event)
- ondeactivate(event)

=== Function

.Prototype methods:
- bind(object)

=== Inflector

=== RegExp

.Methods

- RegExp.escape() - escapes a string to be included in a RegExp.

=== String

String inflections follow the rules of ActiveSupport::Inflector of Ruby on Rails.

.Prototype methods

- capitalize
- camelize
- classsify
- constantize
- dasherize
- humanize
- parameterize
- pluralize
- singularize
- tableize
- titleize
- transliterate
- underscore

=== Optionable

Simplifies options handling to any object. Options are just {key: value} objects.

.Example:

  var Klass = function() {}
  Optionable(Klass)

.Methods added to the object's prototype

- Klass.prototype.setOptions(options) - overwrites previously set options.
- Klass.prototype.setDefaultOptions(options) - adds options only if they were not defined already.


== DOM Support

=== Element



=== JSONP.Request

This class allows cross-domain GET requests whenever the webservice allows
for JSON with Padding requests.

.Example:

  var request = new JSONP.Request();
  JSONP.open('http://example.org/path.json', function() {});
  JSONP.send();

It creates the script tag, attaches it to the DOM, handles the callback and
eventually removes the script tag from the DOM.

.Methods

- open(url, callback)
- send()
- abort()

=== Serializer [WIP]

Do not use.

It should be refactored as HTMLFormElement.prototype.serialize() which means
AlphaCore should be refactored to allow extending the prototype of such
elements.

== UI

User Interfaces Widgets.

  UI.Widget
    initWidget()
    setContent()
    getContent()
    attachToDOM()
    setPosition()
    show()
    close()
    hide()
    destroy()
    displayed()

  UI.Overlay < UI.Widget
    initOverlay()

=== Dialogs

    UI.Dialog < UI.Widget
      initDialog()
      setTitle()
      getTitle()
  #    addButton()
  #    on/button/()

    UI.ModalDialog < UI.Dialog.Base 
      initModalDialog()

  #  UI.ConfirmDialog < UI.ModalDialog
  #    onvalid()
  #    oncancel()
  #
  #  UI.AlertDialog < UI.ModalDialog
  #    onvalid()
  #
  #  UI.PromptDialog < UI.ModalDialog
  #    onvalid()
  #    oncancel()

  PICKERS

    UI.Picker < UI.Widget
      initPicker()
      initialPosition()
      computePosition()
  #    activate()
  #    deactivate()

    UI.ListPicker < UI.Picker
      initListPicker()
      activate()
      deactivate()
      cancel()
      showOrHide()
      setItems()
      getItems()
      getItem(index)
      hasItems()
      clearItems()
      markSelection()
      unmarkSelection()
      moveSelectionUp()
      moveSelectionDown()
      selectSelection()

    UI.ColorPicker < UI.Picker
      initColorPicker()
      setColor()
      setBaseColor()
      applyColor()
      getGradientColor()
      getHueColor()

  ADVANCED

    UI.Sortable
      event: dragstart
      event: drop
    
    UI.Autocomplete < UI.ListPicker
    
  #  UI.Tooltip < UI.Picker

    UI.Notification < UI.Widget
      initNotification(options)
      setMessage(message, timeout)

== EJS

Simple templating system based on erubis' syntax.

  EJS
    initEJS(template)
    compile()
    evaluate(context)


== Resources [WIP]

  Resource
    create(name, options)
  
  Resource.prototype
    newRecord
    persisted()
    save()
    updateAttribute(attribute, value)
    updateAttributes(attributes)
    destroy()

  Resource.classMethods
    find(id)
    create(attributes)
    update(id, attributes)
    destroy(id)
    
    belongsTo(resource, options)
    hasOne(resource, options)
    hasMany(resource, options)

  Examples:

    var User = Resource.create('User')
    
    user = new User({:name => 'my'})
    user.save                                               # => POST   /users.xml   name=my
    User.create({:name => 'me'}, function(user) {})         # => POST   /users.xml   name=me
    User.update(2, {:name => 'myself'}, function(user) {})  # => PUT    /users/2.xml name=myself
    User.destroy(1, function(success) {});                  # => DELETE /users/1.xml
    
    user = User.find(123)                       # => GET    /users/123.xml
    user.update_attribute(:name, "mini me")     # => PUT    /users/123.xml name=mini%20me
    user.destroy                                # => DELETE /users/123.xml

  Relations

    Account = Resource.create('Account')
    Account.hasMany('operations');
    
    Operation = Resource.create('Operation')
    Operation.belongsTo('account')
    
    Account.find(123, function(account)               # => GET /accounts/123.xml
    {
      account.operations(function(operations)         # => GET /accounts/123/operations.xml
      {
      });
      
      account.findOperation(456, function(operation)  # => GET /accounts/123/operations/456.xml
      {
      });
    };              

ActionController

  Routes

