AlphaControl

  Eventable(klass)
    klass.addEventListener()
    klass.removeEventListener()
    klass.createEvent()
    klass.dispatchEvent()
    klass.on/type/()

  Optionable(klass)
    klass.options
    klass.setOptions()

UI

  UI.Widget
    initWidget()
    setContent()
    getContent()
    attachToDOM()
    setPosition()
    show()
    close()
    hide()
    destroy()
    displayed()

  UI.Overlay < UI.Widget
    initOverlay()

  DIALOGS

    UI.Dialog < UI.Widget
      initDialog()
      setTitle()
      getTitle()
  #    addButton()
  #    on/button/()

    UI.ModalDialog < UI.Dialog.Base 
      initModalDialog()

  #  UI.ConfirmDialog < UI.ModalDialog
  #    onvalid()
  #    oncancel()
  #
  #  UI.AlertDialog < UI.ModalDialog
  #    onvalid()
  #
  #  UI.PromptDialog < UI.ModalDialog
  #    onvalid()
  #    oncancel()

  PICKERS

    UI.Picker < UI.Widget
      initPicker()
      initialPosition()
      computePosition()
  #    activate()
  #    deactivate()

    UI.ListPicker  < UI.Picker
      initListPicker()
      activate()
      deactivate()
      cancel()
      showOrHide()
      setItems()
      getItems()
      getItem(index)
      hasItems()
      markSelection()
      unmarkSelection()
      moveSelectionUp()
      moveSelectionDown()
      selectSelection()

    UI.ColorPicker < UI.Picker
      initColorPicker()
      setColor()
      setBaseColor()
      applyColor()
      getGradientColor()
      getHueColor()

  ADVANCED

  #  UI.Autocompleter < UI.ListPicker
  #  UI.Sortable
  #  UI.Tooltip < UI.Picker

    UI.Notification < UI.Widget
      initNotification(options)
      setMessage(message, timeout)

EJS

  EJS
    initEJS(template)
    compile()
    evaluate(context)

Resources

  Resource
    create(name, options)
  
  Resource.prototype
    newRecord
    persisted()
    save()
    updateAttribute(attribute, value)
    updateAttributes(attributes)
    destroy()

  Resource.classMethods
    find(id)
    create(attributes)
    update(id, attributes)
    destroy(id)
    
    belongsTo(resource, options)
    hasOne(resource, options)
    hasMany(resource, options)
    
    var User = Resource.create('User')
    
    user = new User({:name => 'my'})
    user.save                                   # => POST   /users.xml   name=my
    user = User.create({:name => 'me'})         # => POST   /users.xml   name=me
    user = User.update(2, {:name => 'myself'})  # => PUT    /users/2.xml name=myself
    User.destroy(1)                             # => DELETE /users/1.xml
    
    user = User.find(123)                       # => GET    /users/123.xml
    user.update_attribute(:name, "mini me")     # => PUT    /users/123.xml name=mini%20me
    user.destroy                                # => DELETE /users/123.xml
  
  Relations
  
    Account = Resource.create('Account')
    Account.hasMany('operations');
    
    Operation = Resource.create('Operation')
    Operation.belongsTo('account')
    
    account    = Account.find(123)              # => GET /accounts/123.xml
    operations = account.operations()           # => GET /accounts/123/operations.xml
    operation  = account.operations().find(456) # => GET /accounts/123/operations/456.xml

ActionController

  Routes

